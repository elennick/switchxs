pico-8 cartridge // http://www.pico-8.com
version 27
__lua__
function _init()
  cls()

  t_width = 8
  t_height = 10
  
  delta = 0
  spawntimer = 0

  score = 0
  powerlevel = 0

  flipper = {}
  flipper.x = 1
  flipper.spr = {11, 13, 27, 13}
  flipper.curfrm = 1
  flipper.tslaf = 0
  flipper.animating = false
  
  tiles = {} //array of tiles
  grid = {} //2d grid of tiles
  for i=1,t_width do
    grid[i] = {}
    for j=1,t_height do
      grid[i][j] = nil
    end
  end  
end

function _update() 
  update_grid()

		//spawn new tiles
  spawntimer += 1
  if spawntimer > 31 then
    local row = flr(rnd(t_width)) + 1
    local img = flr(rnd(9)) + 1
    
    local newtile = {}
    newtile.x = row
    newtile.y = 1
    newtile.spr = img
    newtile.ani = {20,21,22,23,24}
    newtile.falling = true
    newtile.exploding = false
    add(tiles, newtile)
    
    spawntimer = 0
  end
  
  //move tiles downward and
  //check for matches
  delta += 1
  if delta > 15 then
    for k, v in pairs(tiles) do
      //move down
      local itb = is_tile_below(v)
      if not itb and v.y < t_height - 1
      		then v.y = min(t_height - 1, v.y+1)
      else
        v.falling = false
      end
      
      //check for matches
      if v.y < t_height then
        local tile1 = grid[v.x][v.y]
        local tile2 = grid[v.x][v.y+1]
        
        if tile1 ~= nil and tile2 ~= nil and tile1.spr == tile2.spr then
          del(tiles, tile1)
          del(tiles, tile2)
          score += 50
        end
      end
    end
    delta = 0
  end
  
  //check input
  if btnp(0) then 
    flipper.x = max(1, flipper.x-1) 
		elseif btnp(1) then 
		  flipper.x = min(t_width-1, flipper.x+1)
		elseif btnp(3) then 
		  delta = 31
		elseif btnp(4) or btnp(5) then 
		  flip_columns()
		end
		
		//animate
		if flipper.animating then
		  flipper.curfrm += 1  
		  if flipper.curfrm > #flipper.spr then
		    flipper.curfrm = 1
		    flipper.animating = false
		    flipper.tslaf = 0
		  end
		end
end

function update_grid()
  for i=1,t_width do
    grid[i] = {}
    for j=1,t_height do
      grid[i][j] = nil
    end
  end  
  
  for k, v in pairs(tiles) do
    grid[v.x][v.y]=v
  end
end

function flip_columns() 
  local col1 = flipper.x
  local col2 = flipper.x + 1
  for k, v in pairs(tiles) do
    if v.x == col1 and v.falling == false
      then v.x += 1
    elseif v.x == col2 and v.falling == false
      then v.x -= 1
    end
  end
  
  flipper.curfrm = 1
		flipper.tslaf = 0
		flipper.animating = true
end

function is_tile_below(tile)
  if grid[tile.x][tile.y+1] == nil then
  		return false
  else
    return true
  end
end

function _draw()
  cls(1)
  
  rect(0, 0, 127, 127, 13)
  rect(40, 20, 121, 111, 13)
  rectfill(41, 21, 120, 110, 0)
  
  //draw tiles
		for k, v in pairs(tiles) do
    local x = 32 + (v.x * 10)
    local y = 12 + (v.y * 10)
    spr(v.spr, x, y)
  end
  
  //draw flipper
  spr(flipper.spr[flipper.curfrm], 
      33 + (flipper.x * 10), 
      113, 
      2, 
      1)

  //draw widgets
  print("score:", 10, 30, 3)
  print(score, 20, 40, 6)
  
  print("next", 13, 55, 3)
  print("powerup:", 6, 62, 3)
  spr(33, 12, 70, 2, 2)
  print("lasers", 9, 90, 6)
end

__gfx__
000000000555555005555550055555500555555005555550055555500555555000aaaa000000000000c00bb00bbb00000000bbb0000bbb0000bbb00000000000
0000000055eeee555533335555cccc5555999955552222555566665555ffff550a9999a0707007073010b0009999900000099999009999900999990000000000
00700700585ee5855b5335b5515cc5155a5995a55052250557566575545ff545a957957aaaaaaaaa300b00c10999999999999990000999999999900000000000
00077000588258855bb65bb5511d51155aa45aa55001500557705775544d5445a977977aa999999a0303b3000099999999999900000099999999000000000000
00077000588528855bb56bb55115d1155aa54aa550051005577507755445d445a999999aa999999a003b30300000999999990000000000999900000000000000
00700700585ee5855b5335b5515cc5155a5995a55052250557566575545ff545aaaaaaaaa999999a1c00b0030000055555500000000000055000000000000000
0000000055eeee555533335555cccc5555999955552222555566665555ffff55707007070a9999a0000b01030000000000000000000000000000000000000000
00000000055555500555555005555550055555500555555005555550055555500000000000aaaa000bb00c000000000000000000000000000000000000000000
0000000009999990099999900999999000000000000000000000000000700700090070000000000000000000000000bbbb000000000000000000000000000000
0000000099cccc9999bbbb9999888899000000000000000000700700700000070000000900000000000000000000099999900000000000000000000000000000
000000009c555cc99b555bb998888589000000000007700007000070000900000000000000000000000000000000099999900000000000000000000000000000
000000009cccc5c99bbbb5b998885589000770000079970000090900700009070700900000000000000000000000009999000000000000000000000000000000
000000009cc55cc99bb55bb998858589000770000079970000009000700000070000000000000000000000000000000990000000000000000000000000000000
000000009c5cccc99bbbb5b998555589000000000007700007900070009009000000007000000000000000000000000550000000000000000000000000000000
000000009955559999555b9999888599000000000000000000700700700000070090000000000000000000000000000000000000000000000000000000000000
00000000099999900999999009999990000000000000000000000000007007000000007000000000000000000000000000000000000000000000000000000000
00000000666666666666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000660000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000060000000000a000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000006000000000a0000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000600000000a00000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000600000050000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000600000585000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000600005550000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000600055500000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000600555000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000605556000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000600555000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000600055500000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000600005000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000660000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000666666666666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
