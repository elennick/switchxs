pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
function _init()
  cls()
  
  delta = 0
  spawntimer = 0

  flipper = {}
  flipper.x = 0
  
  tiles = {}
end

function _update() 
		//spawn new tiles
  spawntimer += 1
  if spawntimer > 31 then
    local row = flr(rnd(7))
    local img = flr(rnd(9)) + 1
    
    local newtile = {}
    newtile.x = row
    newtile.y = 0
    newtile.spr = img
    newtile.falling = true
    newtile.exploding = false
    add(tiles, newtile)
    
    spawntimer = 0
  end
  
  //move tiles downward
  delta += 1
  if delta > 30 then
    for k, v in pairs(tiles) do
      local itb = is_tile_below(v)
      if not itb and v.y < 8
      		then v.y = min(8, v.y+1)
      else
        v.falling = false
      end
    end
    delta = 0
  end
  
  //check input
  if btnp(0) 
  		then flipper.x = max(0, flipper.x-1) 
		elseif btnp(1)
		  then flipper.x = min(6, flipper.x+1)
		elseif btnp(3)
		  then delta = 31
		elseif btnp(4) or btnp(5)
		  then flip_columns()
		end
end

function flip_columns() 
  local col1 = flipper.x
  local col2 = flipper.x + 1
  for k, v in pairs(tiles) do
    if v.x == col1 and v.falling == false
      then v.x += 1
    elseif v.x == col2 and v.falling == false
      then v.x -= 1
    end
  end
end

function is_tile_below(tile)
  for k, v in pairs(tiles) do
    if v.x == tile.x 
      and v.y == (tile.y + 1) 
      then return true
    end
  end
  return false
end

function _draw()
  cls(1)
  
  rect(0, 0, 127, 127, 13)
  rect(40, 20, 121, 111, 13)
  rectfill(41, 21, 120, 110, 0)
  
  //draw tiles
		for k, v in pairs(tiles) do
    local x = 42 + (v.x * 10)
    local y = 22 + (v.y * 10)
    spr(v.spr, x, y)
  end
  
  //draw flipper
  spr(11, 43 + (flipper.x * 10), 113, 2, 1)
end

__gfx__
000000000555555005555550055555500555555005555550055555500555555000aaaa000000000000c00bb00bbb00000000bbb0000000000000000000000000
0000000055eeee555533335555cccc5555999955552222555566665555ffff550a9999a0707007073010b0009999900000099999000000000000000000000000
00700700585ee5855b5335b5515cc5155a5995a55052250557566575545ff545a957957aaaaaaaaa300b00c10999999999999990000000000000000000000000
00077000588258855bb65bb5511d51155aa45aa55001500557705775544d5445a977977aa999999a0303b3000099999999999900000000000000000000000000
00077000588528855bb56bb55115d1155aa54aa550051005577507755445d445a999999aa999999a003b30300000999999990000000000000000000000000000
00700700585ee5855b5335b5515cc5155a5995a55052250557566575545ff545aaaaaaaaa999999a1c00b0030000055555500000000000000000000000000000
0000000055eeee555533335555cccc5555999955552222555566665555ffff55707007070a9999a0000b01030000000000000000000000000000000000000000
00000000055555500555555005555550055555500555555005555550055555500000000000aaaa000bb00c000000000000000000000000000000000000000000
00000000099999900999999009999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000099cccc9999bbbb9999888899000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009c555cc99b555bb998888589000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009cccc5c99bbbb5b998885589000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009cc55cc99bb55bb998858589000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009c5cccc99bbbb5b998555589000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009955559999555b9999888599000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000099999900999999009999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
